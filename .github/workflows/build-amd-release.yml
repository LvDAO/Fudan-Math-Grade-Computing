# 工作流的名称
name: Build and Release Executables (Nuitka-Action)

# 触发工作流的事件
on:
  push:
    tags:
      - 'v*.*.*'

# 设置权限以允许创建 release
permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

# 工作流中包含的任务（Jobs）
jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          # Windows 构建
          - os: windows-latest
            platform: windows
            arch: x64
            python-arch: x64
          # macOS 构建
          - os: macos-latest
            platform: macos
            arch: x64
            python-arch: x64
          - os: macos-14  # Apple Silicon (ARM64)
            platform: macos
            arch: arm64
            python-arch: arm64
          # Linux 构建
          - os: ubuntu-latest
            platform: linux
            arch: x64
            python-arch: x64

    runs-on: ${{ matrix.os }}

    # 任务中的步骤（Steps） 
    steps:
      # 第一步：检出（下载）你的代码到虚拟机
      - name: Check-out repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: ${{ matrix.python-arch }}
          cache: 'pip'

      # 第三步：安装和配置 uv
      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      # 第四步：安装项目依赖
      - name: Install Dependencies
        run: |
          uv venv
          uv pip install -e .

      # 第五步：使用 Nuitka-Action 编译项目
      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: main.py
          mode: standalone
          onefile: true
          include-packages: polars
          include-modules: polars
          follow-imports: true
          assume-yes-for-downloads: true
          no-deployment-flag: self-execution

      # 第六步：上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
          include-hidden-files: true

      # 第七步：检查构建产物
      - name: List build artifacts
        run: |
          echo "Checking build directory contents:"
          ls -la build/ || echo "Build directory does not exist"
          find . -name "*.exe" -o -name "*.bin" -o -name "*.app" || echo "No executable files found"
        shell: bash

      # 第八步：准备发布文件 (Windows)
      - name: Prepare release assets (Windows)
        if: matrix.platform == 'windows'
        run: |
          New-Item -ItemType Directory -Force -Path release_assets
          $PLATFORM = "${{ matrix.platform }}"
          $ARCH = "${{ matrix.arch }}"
          
          # 复制 Windows 可执行文件
          if (Test-Path "build\*.exe") {
            Get-ChildItem "build\*.exe" | ForEach-Object {
              $exe_name = $_.BaseName
              $new_name = "${exe_name}-${PLATFORM}-${ARCH}.exe"
              Copy-Item $_.FullName "release_assets\$new_name"
              Write-Host "Copied Windows executable: $new_name"
            }
          }
          
          Write-Host "Release assets prepared:"
          Get-ChildItem release_assets
        shell: powershell

      # 第八步：准备发布文件 (Unix - macOS/Linux)
      - name: Prepare release assets (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p release_assets
          PLATFORM="${{ matrix.platform }}"
          ARCH="${{ matrix.arch }}"
          
          # 复制 Linux 二进制文件
          if ls build/*.bin 1> /dev/null 2>&1; then
            for bin in build/*.bin; do
              bin_name=$(basename "$bin" .bin)
              new_name="${bin_name}-${PLATFORM}-${ARCH}"
              cp "$bin" "release_assets/$new_name"
              chmod +x "release_assets/$new_name"
              echo "Copied Linux binary: $new_name"
            done
          fi
          
          # 处理 macOS .app 目录 - 打包为 zip
          if ls -d build/*.app 1> /dev/null 2>&1; then
            for app in build/*.app; do
              app_name=$(basename "$app" .app)
              zip_name="${app_name}-${PLATFORM}-${ARCH}.zip"
              echo "Creating zip for macOS app: $zip_name"
              (cd build && zip -r "../release_assets/$zip_name" "$(basename "$app")")
            done
          fi
          
          echo "Release assets prepared:"
          ls -la release_assets/
        shell: bash

      # 第九步：创建发布（仅限标签推送）
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 备选方案：使用 GitHub CLI 创建 release
      - name: Create Release with GitHub CLI (fallback)
        if: failure()
        run: |
          # 安装 GitHub CLI (如果需要)
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            case "${{ runner.os }}" in
              Linux)
                curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                sudo apt update && sudo apt install gh
                ;;
              macOS)
                brew install gh
                ;;
              Windows)
                choco install gh
                ;;
            esac
          fi
          
          # 创建 release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            release_assets/* || echo "No files to upload"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash