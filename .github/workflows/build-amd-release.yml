# 工作流的名称
name: Build and Release Executables (Nuitka-Action)

# 触发工作流的事件
on:
  push:
    tags:
      - 'v*.*.*'

# 设置权限以允许创建 release
permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

# 工作流中包含的任务（Jobs）
jobs:
  build-and-release:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    # 任务中的步骤（Steps） 
    steps:
      # 第一步：检出（下载）你的代码到虚拟机
      - name: Check-out repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'
          cache: 'pip'

      # 第三步：安装和配置 uv
      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      # 第四步：安装项目依赖
      - name: Install Dependencies
        run: |
          uv venv
          uv pip install -e .

      # 第五步：使用 Nuitka-Action 编译项目
      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: main.py
          mode: app
          no-deployment-flag: self-execution

      # 第六步：上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
            build/*.dist/**/*
          include-hidden-files: true

      # 第七步：检查构建产物
      - name: List build artifacts
        run: |
          echo "Checking build directory contents:"
          ls -la build/ || echo "Build directory does not exist"
          find . -name "*.exe" -o -name "*.bin" -o -name "*.app" || echo "No executable files found"
        shell: bash

      # 第八步：创建发布（仅限标签推送）
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/*.exe
            build/*.bin
            build/*.app
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 备选方案：使用 GitHub CLI 创建 release
      - name: Create Release with GitHub CLI (fallback)
        if: failure()
        run: |
          # 安装 GitHub CLI (如果需要)
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            case "${{ runner.os }}" in
              Linux)
                curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                sudo apt update && sudo apt install gh
                ;;
              macOS)
                brew install gh
                ;;
              Windows)
                choco install gh
                ;;
            esac
          fi
          
          # 创建 release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            build/*.exe build/*.bin build/*.app || echo "No files to upload"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash